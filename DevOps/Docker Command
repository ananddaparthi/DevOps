
------------------------------ SOME MORE COMMANDS USED IN DOCKER-------------------------------------

$ (docker ps -a) To see the exited or dangled processes

$ (docker rm $(docker ps -aq)  To kill the exited or dangled processes

$ (docker rmi $(docker images -aq) To kill the dangled images

$ (docker rmi imageid) To remove the selected image

$ (docker rmi -f imageid) To force remove the selected image.

1)service docker start --> After installation, starts Docker
2)docker search <centos> --> Search for Images
3)docker pull <ubuntu> --> Download Docker Images
4)docker images       --> Lists all Images
5)docker ps           --> List running containers
6)docker ps -a        --> Lists Stopped containers too
7)docker start <CONATINER_ID> --> Start container
8)docker stop <CONATINER_ID> --> Stop container
9)docker attach <CONATINER_ID> --> Attach to current container
10)docker info                  --> Information on docker
11)docker version               --> Docker's version
12)docker                       --> Docker commands
13)docker rmi <IMAGE_ID>          --> Remove image installed
   docker rmi -f <IMAGE_ID>	  --> Force Delete
   docker rmi $(docker images -q) -->
   docker rmi $(docker ps -a -q) -->
14)docker kill <CONTAINER_ID> --> stop running container from host session
   docker run -it --rm tomcat:8.0 --> pulls & Run default TomCat server
                   <-rm is to delete the container when exit> 
16)docker run -p 8989:8080 tomcat:8.0 --> Run container Foreground
  <HOST PORT>:<SERVER PORT> <REPO >:<TAG>   <HOST PORT> should be unique
17)docker run -d -p 8989:8080 <tomcat:8.0> --> Run container Background
             <DETACHED> <REPO_NAME:TAG>
18)docker logs <CONTAINER_ID> -- > Log Files (without getting in Container)
19)docker exec -it <CONTAINER_ID> bash --> Go to Container files
20)exit --> comes out of container
21)sudo chkconfig docker on --> Docker starts on system boot
22)sudo usermod -aG docker <USER_NAME> --> Adds user to sudo group-docker
23)docker build --rm=true -t <HELLOAPP:1.0> <home/ec2-user/docker/> -->Builds Docker
			<REPO_NAME:TAG><DOCKER_FILE_PATH> up to before docker file
24)docker ps -a | grep Exit | cut -d ' ' -f 1 | xargs sudo docker rm  --> remove all exited containers
25) docker inspect docker-id  
26) docker commit -m "any msg" -a any-author-name conrainer-id new-image-name ==> this is used to create a new image from the existing container.just like creating image of an ec2.
27) docker exeec -u 0 -it container-id bash ==> this is used to coonect to a cintainer as root user if the image is built with non root user.here 0 is for root user.
28) entrypoint ==> we will use this in docker file to run the same exact command evry time
29) creating own networks ==> these networks are used to assign our own ip address and subnet range to our container.
creating networks:
# docker network ls ==> to list all the available networks.there will be some default netwroks.dont touch them.
# docker network create --subnet 10.1.1/10(req subnet range) --gateway 10.1.0.1  myfstnetwork(this is n/w name)
# docker network rm myfstnetwork(this is n/w name) ==> to rm a n/w
creating a network with ip range label etc.
# docker network create --subnet 10.1.1/10(req subnet range) --gateway 10.1.0.1 --ip-range=10.1.4.0/25 --driver=bridge --label=anylabel AnyNameForN/M
To assign our own n/w to a container.
# docker run -it --name AnyNameForOurContainer --net OurN/WName centos:latest /bin/bash
To assign a particular ip addres to our container
# docker run -it --name AnyNameForOurContainer --net OurN/WName --ip 10.4.1.100 centos:latest /bin/bash 
# dokcer run -d -p 9999:8080 -v /home/ec2-user/directry/:/usr/local/tomcat/conf tomcat:8.0
#docker pause containerid  to pause a container
	<unpause> to unpause
Docker Events:
these are used to check the events.
# docker events
Tar a docker image:
# docker save --output imageName.tar imageName (or)
# docker save imageNamen > imageName.tar
loading from a saved image:
# docker load --input imageName.tar (or)
# docker load < imagename.tar
Maintaiing a private repository on docker hub:
create an account on docker hub
# docker push --username=ourHubUsername (it asks for password)
